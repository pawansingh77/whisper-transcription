# -*- coding: utf-8 -*-
"""youtube_files_transcription

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ubFMftjVuKBSjkdl0Waz7e1Ru-sapNSA
"""

import yt_dlp
import os
import ffmpeg
import torch
from transformers import AutoModelForSpeechSeq2Seq, AutoProcessor, pipeline
from pydub import AudioSegment

device = "cuda:0" if torch.cuda.is_available() else "cpu"
torch_dtype = torch.float16 if torch.cuda.is_available() else torch.float32

# Define model size
model_size = "tiny"  # "tiny", "base", "small", "medium", or "large-v3"
model_id = f"openai/whisper-{model_size}"

# Load model and processor
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    model_id, torch_dtype=torch_dtype, low_cpu_mem_usage=True, use_safetensors=True
)
model.to(device)

processor = AutoProcessor.from_pretrained(model_id)

pipe = pipeline(
    "automatic-speech-recognition",
    model=model,
    tokenizer=processor.tokenizer,
    feature_extractor=processor.feature_extractor,
    torch_dtype=torch_dtype,
    device=device,
)

# Download YouTube audio
video_url = "https://www.youtube.com/watch?v=GEmuEWjHr5c"  # Replace with your video link
output_path = "youtube_audio.mp3"
ydl_opts = {
    "format": "bestaudio/best",
    "postprocessors": [{
        "key": "FFmpegExtractAudio",
        "preferredcodec": "mp3",
        "preferredquality": "192",
    }],
    "outtmpl": output_path,
}

with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    ydl.download([video_url])

# Convert to WAV
wav_path = "youtube_audio.wav"
ffmpeg.input(output_path).output(wav_path, format="wav").run(overwrite_output=True)

# Split audio into 30s chunks
def split_audio(input_wav, chunk_length_ms=30000):
    audio = AudioSegment.from_wav(input_wav)
    chunks = [audio[i:i+chunk_length_ms] for i in range(0, len(audio), chunk_length_ms)]

    chunk_files = []
    for i, chunk in enumerate(chunks):
        chunk_filename = f"chunk_{i}.wav"
        chunk.export(chunk_filename, format="wav")
        chunk_files.append(chunk_filename)

    return chunk_files

chunk_files = split_audio(wav_path)

# Transcribe each chunk
for chunk_file in chunk_files:
    result = pipe(chunk_file)
    print(f"Transcription from {chunk_file}:\n", result["text"])